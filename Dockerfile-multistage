ARG     CHEMISTRY_PACKAGE=bbchem
FROM maven:3-openjdk-11 as builder
FROM    builder as compile
ARG     CHEMISTRY_PACKAGE
ENV     CHEMISTRY_PACKAGE=${CHEMISTRY_PACKAGE}
ADD settings.xml /settings.xml
COPY    pom.xml /src/pom.xml
WORKDIR /src
RUN     --mount=type=cache,target=/root/.m2 mvn dependency:resolve -P ${CHEMISTRY_PACKAGE}  -s /settings.xml
ADD     . /src
# Slow Step - Caching this Layer Greatly Improves Build Time  (~6x Faster) 
RUN     --mount=type=cache,target=/root/.m2 mvn clean && \
        mvn compile war:war -P ${CHEMISTRY_PACKAGE} 
FROM tomcat:9.0.109-jdk11-temurin-jammy
# Third and Last Step That Requires Significant (Relative) Amount of Time 
RUN apt-get update && \
    apt-get install -y \
      curl \ 
      libfreetype6 \
      libfontconfig \
      openssl && \
    # Remove default Tomcat webapps for security
    rm -rf /usr/local/tomcat/webapps/docs \
           /usr/local/tomcat/webapps/examples \
           /usr/local/tomcat/webapps/host-manager \
           /usr/local/tomcat/webapps/manager \
           /usr/local/tomcat/webapps/ROOT/* && \
    # Clean up apt cache
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* 
    
# Add nodejs for prepare config files
ENV NPM_CONFIG_LOGLEVEL warn
ENV NODE_VERSION 20.x
# Second Slowest Step 
RUN curl -fsSL https://deb.nodesource.com/setup_$NODE_VERSION | bash - && \
  apt-get install -y nodejs && \
  npm install -g \
    coffeescript@2.5.1 \
    dotenv@10.0.0 \
    dotenv-expand@5.1.0 \ 
    flat@5.0.2 \
    glob@7.1.6 \
    properties@1.2.1 \ 
    properties-parser@0.3.1 \
    underscore@1.12.0 \
    underscore-deep-extend@1.1.5
ENV NODE_PATH /usr/lib/node_modules
# Add runner user so we don't run as root
RUN useradd -u 1000 -ms /bin/bash runner && \
  chown -R runner:runner /usr/local/tomcat/
# Allow certificates to be added by runner (Temurin path -- now that we're changing to new Tomcat image)
# Also tolerate layout variance by detecting cacerts relative to keytool.
RUN set -eux; \
  # detect JAVA_HOME via keytool
  JAVA_HOME="$(dirname "$(dirname "$(readlink -f "$(command -v keytool)")")")"; \
  CACERTS="$JAVA_HOME/lib/security/cacerts"; \
  [ -f "$CACERTS" ] || { echo "cacerts not found at $CACERTS"; exit 1; }; \
  chgrp runner "$CACERTS" || true; \
  chmod g+w "$CACERTS" || true; \
  mkdir -p /usr/lib/jvm/java/jre/lib/security; \
  ln -sf "$CACERTS" /usr/lib/jvm/java/jre/lib/security/cacerts
# Get acas-roo-server compiled code
COPY    --chown=runner:runner --from=compile /src/target/acas*.war /usr/local/tomcat/webapps/acas.war
COPY    --chown=runner:runner --from=compile /src/target/acas* /usr/local/tomcat/webapps/acas/
# Copy hardened Tomcat configuration
COPY    --chown=runner:runner --from=compile /src/src/main/resources/tomcat-config/server.xml /usr/local/tomcat/conf/server.xml
# Create simple ROOT webapp directory and index.html
RUN mkdir -p /usr/local/tomcat/webapps/ROOT && \
    echo '<!DOCTYPE html><html><head><title>Application Server</title></head><body><h1>Application Server</h1><p>This server is running properly.</p></body></html>' > /usr/local/tomcat/webapps/ROOT/index.html && \
    chown -R runner:runner /usr/local/tomcat/webapps/ROOT
# Wait for it startup script
COPY    --chown=runner:runner wait-for-it.sh ./wait-for-it.sh
RUN     chmod 755 wait-for-it.sh
# Copy runtime hardening script
COPY    --chown=runner:runner harden_tomcat_runtime.sh ./harden_tomcat_runtime.sh
RUN     chmod 755 harden_tomcat_runtime.sh
WORKDIR $CATALINA_HOME
ENV    ACAS_HOME=/home/runner/build
ENV    CATALINA_OPTS="-Xms512M -Xmx1536M -XX:MaxPermSize=512m"
# Prepare config files
COPY --chown=runner:runner ./PrepareConfigFiles.coffee /home/runner/build/src/javascripts/BuildUtilities/PrepareConfigFiles.coffee
# Become runner user so we don't run as root
USER runner
# Setup entrypoint
COPY entrypoint.sh /entrypoint.sh
ENTRYPOINT ["/bin/bash", "/entrypoint.sh"] 
CMD     ["catalina.sh", "run"]
