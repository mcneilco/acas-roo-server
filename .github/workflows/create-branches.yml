name: Create mirrored base branches

on:
  push:
    branches: ["**"]
  workflow_dispatch:
    inputs:
      branch-name:
        description: 'A branch to create'
        required: false
        type: string
  create:
    tags: "**"
jobs:
  mirror-base-branch:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        acas-repo: [ acas, acasclient, racas ]
    steps:
      - name: Set ACAS_REF to the current to input branch or github.ref
        run: |
          INPUT_BRANCH_NAME=${{ github.event.inputs.branch-name }}
          NAME=${INPUT_BRANCH_NAME:-"${{ github.ref }}"}
          if [ -z "${{ github.event.inputs.branch-name }}" ]; then
            echo "ACAS_REF=$(echo ${{ github.ref }} | sed 's/refs\/heads\///g')" >> $GITHUB_ENV
          else
            echo "ACAS_REF=$(echo $INPUT_BRANCH_NAME)" >> $GITHUB_ENV
          fi          
      - name: Check if branch already exists in repo mcneilco/${{ matrix.acas-repo }}
        env: 
          GITHUB_TOKEN: ${{ secrets.ACAS_WORKFLOWS_TOKEN }}
        uses: actions/github-script@v6
        id: branch-exists
        with:
          script: |
            try {
              response = await github.rest.git.getRef({
                owner: 'mcneilco',
                repo: "${{ matrix.acas-repo }}",
                ref: "heads/${{ env.ACAS_REF }}"
              })
            } catch (e) {
                return false
            }
            return true
        continue-on-error: true
      -
        name: Checkout repo mcneilco/${{ matrix.acas-repo }}
        uses: actions/checkout@v3
        if: ${{ steps.branch-exists.outputs.result == 'false' }}
        with:
          fetch-depth: 0
      - name: Get name of closest "release" branch from ${{ env.ACAS_REF }} in this repo (${{ github.event.repository.name }})
        if: ${{steps.branch-exists.outputs.result == 'false' }}
        id: get-closest-release-branch
        run: |
          search="release"

          # Get most recent commit with a release branch
          commit=$(git log --decorate \
            | grep 'commit' \
            | grep "origin/$search" \
            | head -n 1 \
            | awk '{ print $2 }' \
            | tr -d "\n")

          # Fetch the release by matching the search pattern, grabbing the branch names
          match=refs/remotes/origin/$search/
          release_refs_with_commit=$(git show-ref \
            | grep $commit \
            | grep $match \
            | awk '{ print $2 }' \
            | sed  "s~$match~~g")

          # If more than one release matches commit then sort by semver (desc) e.g. 2023.1.0, 2023.0.0, 2022.0.0 and pick 20223.1.0
          release_name=$search/$(echo "$release_refs_with_commit" | sort -t. -k 1,1nr -k 2,2nr -k 3,3nr -k 4,4nr | head -n1)
          echo "Closest release branch: $release_name"
          echo ::set-output name=release-branch-name::$release_name
      - name: Create new branch ${{ env.ACAS_REF }} in repo mcneilco/${{ matrix.acas-repo }} from branch ${{ steps.get-closest-release-branch.outputs.release-branch-name}}
        if: ${{steps.branch-exists.outputs.result == 'false' }}
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.ACAS_WORKFLOWS_TOKEN }}
          script: |
            try {
              releaseBranchRef = await github.rest.git.getRef({
                owner: 'mcneilco',
                repo: "${{ matrix.acas-repo }}",
                ref: "/heads/${{ steps.get-closest-release-branch.outputs.release-branch-name}}"
              })
              console.log(releaseBranchRef)
              response = await github.rest.git.createRef({
                owner: 'mcneilco',
                repo: "${{ matrix.acas-repo }}",
                ref: "ref/heads/${{ env.ACAS_REF }}",
                sha: releaseBranchRef.data.object.sha
              })
            } catch (e) {
                console.log(e)
            }
        continue-on-error: true